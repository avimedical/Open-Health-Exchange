"""
Django settings for open_health_exchange project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import dotenv
import dj_database_url
from pathlib import Path


dotenv.load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-zyao2#r)3jj8tdl5=a7*talwte2p2#nd!d&%xubebu2_j4v5r!"

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    os.environ.get("ALLOWED_HOST", "*"),
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "mozilla_django_oidc",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "social_django",  # Add python-social-auth
    # Third-party apps
    "huey.contrib.djhuey",
    # Local apps
    "ingestors",
    "base",
    "transformers",
    "publishers",
    "metrics",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "social_django.middleware.SocialAuthExceptionMiddleware",
]

ROOT_URLCONF = "open_health_exchange.urls"

REST_FRAMEWORK = {
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.AcceptHeaderVersioning",
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer"
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "mozilla_django_oidc.contrib.drf.OIDCAuthentication",
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",  # for browsable API
    ],
    # Add this to ensure templates are searched in the appropriate directories
    "TEMPLATE_DIRS": [os.path.join(BASE_DIR, "templates")],
    # Set a default format for responses
    "DEFAULT_CONTENT_NEGOTIATION_CLASS": "rest_framework.negotiation.DefaultContentNegotiation",
}

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "social_django.context_processors.backends",  # python-social-auth context processors
                "social_django.context_processors.login_redirect",  # python-social-auth context processors
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = (
    "base.backends.WithingsOAuth2",  # Custom Withings backend
    "social_core.backends.fitbit.FitbitOAuth2",  # Fitbit backend from python-social-auth
    "base.backends.OidcAuthenticationBackend",  # Custom OIDC backend
    "django.contrib.auth.backends.ModelBackend",  # Default Django authentication backend
)

AUTH_USER_MODEL = "base.EHRUser"  # Custom user model for EHR users

# CONFIGURATION FOR OAUTH2
RS_URL = os.environ.get("RS_URL", "http://localhost:8000")
OIDC_RP_CLIENT_ID = os.environ.get("RS_CLIENT_ID", "620076")
OIDC_RP_CLIENT_SECRET = os.environ.get("RS_CLIENT_SECRET", "0c481c48216903dd98d86842a62f18bb21fe9e546ae5e3540c4f71fc")
OIDC_OP_AUTHORIZATION_ENDPOINT = f"{RS_URL}/oidc/authorize/"
OIDC_OP_TOKEN_ENDPOINT = f"{RS_URL}/oidc/token/"
OIDC_OP_USER_ENDPOINT = f"{RS_URL}/oidc/userinfo/"
OIDC_DRF_AUTH_BACKEND = "base.backends.OidcAuthenticationBackend"

# Environment variables for OAuth2 credentials
SOCIAL_AUTH_JSONFIELD_ENABLED = True
SOCIAL_AUTH_REDIRECT_STATE = True
SOCIAL_AUTH_STATE_PARAMETER = True
SOCIAL_AUTH_REQUIRE_POST = False
SOCIAL_AUTH_FORCE_EMAIL_LOWERCASE = True
SOCIAL_AUTH_FIELDS_STORED_IN_SESSION = ["key", "token"]
SOCIAL_AUTH_REDIRECT_IS_HTTPS = True

SOCIAL_AUTH_WITHINGS_KEY = os.environ.get("WITHINGS_CLIENT_ID", "123456")
SOCIAL_AUTH_WITHINGS_SECRET = os.environ.get("WITHINGS_CLIENT_SECRET", "123456")

SOCIAL_AUTH_FITBIT_KEY = os.environ.get("FITBIT_CLIENT_ID")
SOCIAL_AUTH_FITBIT_SECRET = os.environ.get("FITBIT_CLIENT_SECRET")
SOCIAL_AUTH_FITBIT_SCOPE = ["activity", "heartrate", "location", "nutrition", "profile", "settings", "sleep", "social", "weight"]

SOCIAL_AUTH_USER_MODEL = 'base.EHRUser'  # Tell python-social-auth to use custom user model

LOGIN_REDIRECT_URL = "/devices/"  # Redirect URL after successful login, adjust as needed
LOGIN_ERROR_URL = "/login-error/"  # Redirect URL after login error, adjust as needed

# Additional OAuth2 settings
SOCIAL_AUTH_WITHINGS_SCOPE = ["user.info", "user.metrics", "user.activity"]

# More detailed social auth settings
SOCIAL_AUTH_PIPELINE = (
    # Get the social data from the provider
    "social_core.pipeline.social_auth.social_details",
    "social_core.pipeline.social_auth.social_uid",
    "social_core.pipeline.social_auth.auth_allowed",
    # Custom function to use current user instead of creating new one
    "base.pipeline.associate_by_token_user",
    # Get or create user from the stored user ID
    "social_core.pipeline.social_auth.social_user",
    # Associate the social account with the current user
    "social_core.pipeline.social_auth.associate_user",
    # Get extra data from provider and store it
    "social_core.pipeline.social_auth.load_extra_data",
    "social_core.pipeline.user.user_details",
    # Custom function to update ProviderLink model
    "base.pipeline.load_devices",
)

# Disable new user creation - we only want to link accounts
SOCIAL_AUTH_CREATE_USERS = False

# Enhanced logging for oauth debugging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "social_core": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
        "base": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

WSGI_APPLICATION = "open_health_exchange.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
LOCAL_PGSQL = "postgres://postgres:postgres@localhost:5432/open_health_exchange_local"  # overwrite in local please
DATABASES = {}
DATABASES["default"] = dj_database_url.config(default=LOCAL_PGSQL)


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Huey settings
HUEY_CONFIG = {
    "immediate": False,
    "logfile": "huey.log",
    "loglevel": "INFO",
    "consumer": {"workers": 1, "worker_type": "thread"},
    "redis": {
        "host": "localhost",
        "port": 6379,
        "db": 0,
    },
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",  # Use the same Redis instance as Huey, but a different DB (e.g., DB 1)
        "OPTIONS": {
            "client_class": "django_redis.client.DefaultClient",
        }
    }
}


# Static files (CSS, JavaScript, images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
