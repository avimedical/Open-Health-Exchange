name: CI

on:
  pull_request:
    branches: [ main, development, staging ]

jobs:
  test:
    name: Unit tests
    runs-on: ubuntu-latest
    services:
      valkey:
        image: ghcr.io/valkey-io/valkey:8-bookworm
        ports:
          - 6379:6379
        options: >-
          --health-cmd "sh -c 'valkey-cli ping || redis-cli ping'"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.14'

      - name: Install Poetry 2.2
        uses: snok/install-poetry@v1
        with:
          version: 2.2.1
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-ansi

      - name: Lint with Ruff
        run: |
          poetry run ruff check .

      - name: Check formatting with Ruff
        run: |
          poetry run ruff format --check .

      - name: Run tests
        env:
          # Default envs for tests; override in repo secrets if needed
          DJANGO_SETTINGS_MODULE: open_health_exchange.settings
          DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
          REDIS_URL: redis://valkey:6379/0
          REDIS_CACHE_URL: redis://valkey:6379/1
        run: |
          poetry run python -m pytest -q

  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/open-health-exchange
          tags: |
            type=ref,event=pr

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
